{"ast":null,"code":"import _toConsumableArray from\"/Users/youngjo/Desktop/code/socket_practica/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/youngjo/Desktop/code/socket_practica/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/youngjo/Desktop/code/socket_practica/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect,useRef}from'react';import socketIOClient from'socket.io-client';var NEW_MESSAGE_EVENT=\"new-message-event\";var SOCKET_SERVER_URL=\"http://youn9jo.github.io/socket_practica:3030\";var ChatRoom=function ChatRoom(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),count=_useState4[0],setCount=_useState4[1];var socketRef=useRef();useEffect(function(){socketRef.current=socketIOClient(SOCKET_SERVER_URL);socketRef.current.on(NEW_MESSAGE_EVENT,function(message){var incomingMessage=_objectSpread(_objectSpread({},message),{},{isOwner:message.senderId===socketRef.current.id});setMessages(function(messages){return[].concat(_toConsumableArray(messages),[incomingMessage]);});});socketRef.current.on('usercount',function(count){setCount(count);});return function(){socketRef.current.disconnect();};},[]);var sendMessage=function sendMessage(messageBody){socketRef.current.emit(NEW_MESSAGE_EVENT,{body:messageBody,senderId:socketRef.current.id});};return{count:count,messages:messages,sendMessage:sendMessage};};export default ChatRoom;;","map":{"version":3,"sources":["/Users/youngjo/Desktop/code/socket_practica/Client/src/ChatRoom.js"],"names":["useState","useEffect","useRef","socketIOClient","NEW_MESSAGE_EVENT","SOCKET_SERVER_URL","ChatRoom","messages","setMessages","count","setCount","socketRef","current","on","message","incomingMessage","isOwner","senderId","id","disconnect","sendMessage","messageBody","emit","body"],"mappings":"kgBAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CACA,GAAMC,CAAAA,iBAAiB,CAAG,+CAA1B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,cAAgCN,QAAQ,CAAC,EAAD,CAAxC,wCAAOO,QAAP,eAAiBC,WAAjB,eACA,eAA0BR,QAAQ,CAAC,EAAD,CAAlC,yCAAOS,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,SAAS,CAAGT,MAAM,EAAxB,CAEAD,SAAS,CAAC,UAAM,CACZU,SAAS,CAACC,OAAV,CAAoBT,cAAc,CAACE,iBAAD,CAAlC,CACAM,SAAS,CAACC,OAAV,CAAkBC,EAAlB,CAAqBT,iBAArB,CAAwC,SAACU,OAAD,CAAa,CACjD,GAAMC,CAAAA,eAAe,gCACdD,OADc,MAEjBE,OAAO,CAAEF,OAAO,CAACG,QAAR,GAAqBN,SAAS,CAACC,OAAV,CAAkBM,EAF/B,EAArB,CAIAV,WAAW,CAAC,SAACD,QAAD,qCAAkBA,QAAlB,GAA4BQ,eAA5B,IAAD,CAAX,CACH,CAND,EAQAJ,SAAS,CAACC,OAAV,CAAkBC,EAAlB,CAAqB,WAArB,CAAkC,SAACJ,KAAD,CAAW,CACzCC,QAAQ,CAACD,KAAD,CAAR,CACH,CAFD,EAIA,MAAQ,WAAM,CACVE,SAAS,CAACC,OAAV,CAAkBO,UAAlB,GACH,CAFD,CAGH,CAjBQ,CAiBN,EAjBM,CAAT,CAmBA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,WAAD,CAAiB,CACjCV,SAAS,CAACC,OAAV,CAAkBU,IAAlB,CAAuBlB,iBAAvB,CAA0C,CACtCmB,IAAI,CAAEF,WADgC,CAEtCJ,QAAQ,CAAEN,SAAS,CAACC,OAAV,CAAkBM,EAFU,CAA1C,EAIH,CALD,CAOA,MAAO,CAAET,KAAK,CAALA,KAAF,CAASF,QAAQ,CAARA,QAAT,CAAmBa,WAAW,CAAXA,WAAnB,CAAP,CACH,CAhCD,CAkCA,cAAed,CAAAA,QAAf,CAAwB","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_MESSAGE_EVENT = \"new-message-event\";\nconst SOCKET_SERVER_URL = \"http://youn9jo.github.io/socket_practica:3030\";\n\nconst ChatRoom = () => {\n    const [messages, setMessages] = useState([]);\n    const [count, setCount] = useState(\"\");\n    const socketRef = useRef();\n\n    useEffect(() => {\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n        socketRef.current.on(NEW_MESSAGE_EVENT, (message) => {\n            const incomingMessage = {\n                ...message,\n                isOwner: message.senderId === socketRef.current.id,    \n            };\n            setMessages((messages) => [...messages, incomingMessage]);\n        });\n\n        socketRef.current.on('usercount', (count) => {\n            setCount(count);\n        });\n\n        return (() => {\n            socketRef.current.disconnect();\n        })\n    }, []);\n\n    const sendMessage = (messageBody) => {\n        socketRef.current.emit(NEW_MESSAGE_EVENT, {\n            body: messageBody,\n            senderId: socketRef.current.id,\n        })\n    }\n\n    return { count, messages, sendMessage }\n}\n\nexport default ChatRoom;;"]},"metadata":{},"sourceType":"module"}