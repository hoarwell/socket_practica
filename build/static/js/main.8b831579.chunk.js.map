{"version":3,"sources":["ChatRoom.js","App.js","index.js"],"names":["NEW_MESSAGE_EVENT","ChatRoom","useState","messages","setMessages","count","setCount","socketRef","useRef","useEffect","current","socketIOClient","on","message","incomingMessage","isOwner","senderId","id","disconnect","sendMessage","messageBody","emit","body","App","newMessage","setNewMessage","messageRef","console","log","className","map","i","ref","placeholder","variant","value","onChange","e","preventDefault","target","onKeyUp","key","disabled","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAGMA,EAAoB,oBAqCXC,EAlCE,WACb,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAYC,mBAElBC,qBAAU,WAcN,OAbAF,EAAUG,QAAUC,IARF,iDASlBJ,EAAUG,QAAQE,GAAGZ,GAAmB,SAACa,GACrC,IAAMC,EAAe,2BACdD,GADc,IAEjBE,QAASF,EAAQG,WAAaT,EAAUG,QAAQO,KAEpDb,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4BW,UAG5CP,EAAUG,QAAQE,GAAG,aAAa,SAACP,GAC/BC,EAASD,MAGL,WACJE,EAAUG,QAAQQ,gBAEvB,IASH,MAAO,CAAEb,QAAOF,WAAUgB,YAPN,SAACC,GACjBb,EAAUG,QAAQW,KAAKrB,EAAmB,CACtCsB,KAAMF,EACNJ,SAAUT,EAAUG,QAAQO,Q,OCkCzBM,MA/Df,WACE,MAAyCtB,IAAjCI,EAAR,EAAQA,MAAOF,EAAf,EAAeA,SAAUgB,EAAzB,EAAyBA,YACzB,EAAoCjB,mBAAS,IAA7C,mBAAOsB,EAAP,KAAmBC,EAAnB,KACMC,EAAalB,mBAsBnB,OADAmB,QAAQC,IAAIzB,GAEV,qBAAK0B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,8BAAKxB,EAAL,yBACA,sBAAKwB,UAAU,oBAAf,UACE,6BACI1B,EAAS2B,KAAI,SAACjB,EAASkB,GAAV,MACQ,KAAjBlB,EAAQS,KACN,+BACIT,EAAQG,SADZ,IACyBH,EAAQS,OADxBS,GAGP,UAGZ,qBAAKC,IAAMN,OAEb,sBAAKG,UAAU,mBAAf,UACE,uBACEA,UAAU,gBACVI,YAAY,qBACZC,QAAQ,WACRC,MAAQX,EACRY,SAnCqB,SAACC,GAC9BA,EAAEC,iBACFb,EAAcY,EAAEE,OAAOJ,QAkCfK,QA/BU,SAACH,GACN,UAAVA,EAAEI,MACHtB,EAAYK,GACZC,EAAc,QA8BV,wBACEiB,SAA4B,KAAflB,EACbmB,QA/CgB,WACnBnB,IACHL,EAAYK,GACZC,EAAc,MA6CRI,UAAU,cAHZ,2BClDVe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8b831579.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_MESSAGE_EVENT = \"new-message-event\";\nconst SOCKET_SERVER_URL = \"http://youn9jo.github.io/socket_practica:3030\";\n\nconst ChatRoom = () => {\n    const [messages, setMessages] = useState([]);\n    const [count, setCount] = useState(\"\");\n    const socketRef = useRef();\n\n    useEffect(() => {\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n        socketRef.current.on(NEW_MESSAGE_EVENT, (message) => {\n            const incomingMessage = {\n                ...message,\n                isOwner: message.senderId === socketRef.current.id,    \n            };\n            setMessages((messages) => [...messages, incomingMessage]);\n        });\n\n        socketRef.current.on('usercount', (count) => {\n            setCount(count);\n        });\n\n        return (() => {\n            socketRef.current.disconnect();\n        })\n    }, []);\n\n    const sendMessage = (messageBody) => {\n        socketRef.current.emit(NEW_MESSAGE_EVENT, {\n            body: messageBody,\n            senderId: socketRef.current.id,\n        })\n    }\n\n    return { count, messages, sendMessage }\n}\n\nexport default ChatRoom;;","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport ChatRoom from './ChatRoom';\n\nfunction App() {\n  const { count, messages, sendMessage } = ChatRoom();\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messageRef = useRef();\n\n  const handleSendMessage = () => {\n    if ( newMessage ) {\n      sendMessage(newMessage);\n      setNewMessage(\"\");\n    }\n  };\n\n  const handleNewMessageChange = (e) => {\n    e.preventDefault();\n    setNewMessage(e.target.value)\n  }\n\n  const handleKeyUp = (e) => {\n    if(e.key === \"Enter\"){\n      sendMessage(newMessage);\n      setNewMessage(\"\");\n    }\n  }\n\n  console.log(messages)\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <p>{ count } in this chat room.</p>\n        <div className=\"message-container\">\n          <ul>\n            { messages.map((message, i) => (\n                  message.body !== \"\" ? (\n                    <li key={i}>\n                      { message.senderId } { message.body }\n                    </li>\n                  ) : null\n            ))}\n          </ul>\n          <div ref={ messageRef }></div>\n        </div>\n        <div className=\"action-container\">\n          <input\n            className=\"message-input\"\n            placeholder=\"enter message here\"\n            variant=\"outlined\"\n            value={ newMessage }\n            onChange={ handleNewMessageChange }\n            onKeyUp = { handleKeyUp }\n          />\n          <button\n            disabled = { newMessage === \"\" }\n            onClick={handleSendMessage}\n            className=\"send-button\"\n          >\n            Send\n          </button>\n        </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}